<!--
notice : you should install hector-slam at first,  sudo apt-get install ros-indigo-hector-slam
           this launch just for test, you should improve the param for the best result.
E-mail: kint.zhao@slamtec.com
This launch was modified by CÃ©sar Quiroz to run with RPLidar A1
Ubuntu 16.04 Xenial
ROS version: Kinetic
E-mail: cesarhcq@gmail.com
Read the wikipage of http://wiki.ros.org/hector_mapping
See the "map_update_distance_thresh" it means that the close obstacles can be ignored by Lidar.
 -->
<launch>

    <!--Laser rplidar-->
    <include file="$(find rplidar_ros)/launch/rplidar.launch" />
	
	<!-- Gyro from MPU9250 -->
	<!-- <include file="$(find i2c_imu)/launch/i2c_imu_auto.launch" /> -->

    <!--Arduino Low-Controller -->
    <node pkg="rosserial_python" type="serial_node.py" name="arduino_controller" output= "screen">
        <param name="port" value="/dev/ttyACM0"/>  
        <param name="baud" value="57600"/>
    </node>

    <!--Gyro from smartphone-->
    <!-- <node name="imu_node" pkg="abrobot_control" type="gyro.py" output="screen"> -->
    <!--    <param name="host" value="192.168.42.225" /> --> <!--Need to change everytime when reconnect the device-->
    <!--    <param name="num_callibration_itrs" value="1" /> -->
    <!--     <param name="debug" value="false" /> -->
    <!--    </node> -->

    <!--Odometry Controller-->
    <node name="base_controller_node" pkg="base_controller" type="base_controller">
        <param name="alpha" value="0.0" />
        <param name="use_imu" value="true" />
    </node>

    <!--Camera USB-->
    <!-- <node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" >
        <param name="video_device" value="/dev/video0" />
        <param name="image_width" value="640" />
        <param name="image_height" value="480" />
        <param name="pixel_format" value="yuyv" />
        <param name="camera_frame_id" value="usb_cam" />
        <param name="io_method" value="mmap"/>
        <param name="camera_info_url" value="file://$(env HOME)/.ros/camera_info/head_camera.yaml"/>
    </node> -->

    <!--<node name="rviz" pkg="rviz" type="rviz" args="-d $(find base_controller)/rviz/rviz_laser_encoder.rviz" /> -->

    <node pkg="hector_mapping" type="hector_mapping" name="hector_height_mapping" output="screen">
        
        <param name="scan_topic" value="scan" />
        <param name="map_frame" value="map" />
        <param name="base_frame" value="base_link" />
        <param name="odom_frame" value="odom" />

        <param name="output_timing" value="false"/>
        <param name="advertise_map_service" value="true"/>

        <param name="use_tf_scan_transformation" value="true"/>
        <param name="use_tf_pose_start_estimate" value="false"/>
        <param name="pub_map_odom_transform" value="true"/>
        <param name="map_with_known_poses" value="false"/>

        <param name="map_pub_period" value="0.5"/>
        <param name="update_factor_free" value="0.45"/>

        <param name="map_update_distance_thresh" value="0.02"/>
        <param name="map_update_angle_thresh" value="0.1"/>

        <param name="map_resolution" value="0.05"/>
        <param name="map_size" value="1024"/>
        <param name="map_start_x" value="0.5"/>
        <param name="map_start_y" value="0.5"/>

    </node>

    <arg name="geotiff_map_file_path" default="$(find hector_geotiff)/maps"/>

    <param name="/use_sim_time" value="false"/>

    <include file="$(find hector_geotiff)/launch/geotiff_mapper.launch">
        <arg name="trajectory_source_frame_name" value="scanmatcher_frame"/>
        <arg name="map_file_path" value="$(arg geotiff_map_file_path)"/>
    </include>

    <node name="teleop" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" output="screen" launch-prefix="xterm -e"/>

    <!-- Teleop -->
    <!--<node name="GuntherTeleop" pkg="arduino_controller" type="gunther_teleop.py" output="screen" launch-prefix="xterm -e"/> -->

</launch>


